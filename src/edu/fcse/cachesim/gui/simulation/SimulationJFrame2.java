package edu.fcse.cachesim.gui.simulation;

import edu.fcse.cachesim.exceptions.DefaultElementSizeNotSetException;
import edu.fcse.cachesim.exceptions.TagNotFoundException;
import edu.fcse.cachesim.filemanip.*;
import edu.fcse.cachesim.gui.DrawArchitecturePanelGeneric;
import edu.fcse.cachesim.gui.construction.ConstructionJFrame2;
import edu.fcse.cachesim.gui.construction.DrawArchitecturePanel;
import edu.fcse.cachesim.gui.utils.ATFileFilter;
import edu.fcse.cachesim.gui.utils.CCFileFilter;
import edu.fcse.cachesim.gui.utils.HTMLFileFilter;
import edu.fcse.cachesim.gui.utils.StringLiterals;
import edu.fcse.cachesim.implementation.OneStep;
import edu.fcse.cachesim.interfaces.Architecture;
import edu.fcse.cachesim.interfaces.CPUCore;
import edu.fcse.cachesim.interfaces.CacheLevel;
import edu.fcse.cachesim.interfaces.CacheLine;
import edu.fcse.cachesim.interfaces.CacheSet;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Rectangle;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.channels.FileChannel;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JViewport;

public class SimulationJFrame2 extends javax.swing.JFrame {

    ConstructionJFrame2 construction_mode;
    JFileChooser fileChooser = new JFileChooser();
    Architecture loadedArchitecture;
    int clickedLevel;
    List<CacheSet> visibleCacheSets;
    List<CacheLine> visibleCacheLines;
    ATFParser atf;
    SimState stateOfSimulator;
    Timer timerRun;
    int selectedDelayInSec = 2;
    OneStep lastResult;
    BufferedWriter verboseOutput;
    File verboseFile;
    DrawArchitecturePanelGeneric drawArchitecturePanel;
    private Map<String,CPUCore> coreTagToCore;
    enum SimState {
        START, STOP, STEP, END
    }

    /**
     * Creates new form SimulationJFrame
     */
    public SimulationJFrame2() {
        initComponents();
        Map<String, CPUCore> drawArchitecture = new HashMap<>();
        drawArchitecturePanel = new DrawArchitecturePanelGeneric(drawArchitecture);
        drawArchitecturePanel.setPreferredSize(architectureHolderPanel.getSize());
        drawArchitecturePanel.setSize(architectureHolderPanel.getSize());
        architectureHolderPanel.add(drawArchitecturePanel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jPanelSimulation = new javax.swing.JPanel();
        architectureHolderPanel = new javax.swing.JPanel();
        jMenuBarSimulation = new javax.swing.JMenuBar();
        jMenuSimulation_SimOpt = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItemSimulation_LoadTrace = new javax.swing.JMenuItem();
        jMenuItemSimulation_StartSim = new javax.swing.JMenuItem();
        jMenuItemSimulation_StopSim = new javax.swing.JMenuItem();
        jMenuItemSimulation_StepSim = new javax.swing.JMenuItem();
        jMenuItemNextWithShortcut = new javax.swing.JMenuItem();
        jMenuSimulation_ShowConstr = new javax.swing.JMenu();
        jMenuItemSimulation_LoadConfig = new javax.swing.JMenuItem();
        jMenuItemSimulation_CreateConfig = new javax.swing.JMenuItem();
        jMenuSimulation_NextStep = new javax.swing.JMenu();
        jMenuSimulation_ChangeDelay = new javax.swing.JMenu();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("EDUCacheSim: Simulation Mode");

        jPanelSimulation.setPreferredSize(new java.awt.Dimension(500, 425));

        javax.swing.GroupLayout architectureHolderPanelLayout = new javax.swing.GroupLayout(architectureHolderPanel);
        architectureHolderPanel.setLayout(architectureHolderPanelLayout);
        architectureHolderPanelLayout.setHorizontalGroup(
            architectureHolderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 901, Short.MAX_VALUE)
        );
        architectureHolderPanelLayout.setVerticalGroup(
            architectureHolderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 311, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanelSimulationLayout = new javax.swing.GroupLayout(jPanelSimulation);
        jPanelSimulation.setLayout(jPanelSimulationLayout);
        jPanelSimulationLayout.setHorizontalGroup(
            jPanelSimulationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(architectureHolderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanelSimulationLayout.setVerticalGroup(
            jPanelSimulationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSimulationLayout.createSequentialGroup()
                .addComponent(architectureHolderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 220, Short.MAX_VALUE))
        );

        jMenuSimulation_SimOpt.setText("Simulation");

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Load Study Case");
        jMenuItem3.setEnabled(false);
        jMenuSimulation_SimOpt.add(jMenuItem3);

        jMenuItemSimulation_LoadTrace.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemSimulation_LoadTrace.setText("Load Trace");
        jMenuItemSimulation_LoadTrace.setEnabled(false);
        jMenuItemSimulation_LoadTrace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSimulation_LoadTraceActionPerformed(evt);
            }
        });
        jMenuSimulation_SimOpt.add(jMenuItemSimulation_LoadTrace);

        jMenuItemSimulation_StartSim.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItemSimulation_StartSim.setText("Start");
        jMenuItemSimulation_StartSim.setEnabled(false);
        jMenuItemSimulation_StartSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSimulation_StartSimActionPerformed(evt);
            }
        });
        jMenuSimulation_SimOpt.add(jMenuItemSimulation_StartSim);

        jMenuItemSimulation_StopSim.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItemSimulation_StopSim.setText("Stop");
        jMenuItemSimulation_StopSim.setEnabled(false);
        jMenuItemSimulation_StopSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSimulation_StopSimActionPerformed(evt);
            }
        });
        jMenuSimulation_SimOpt.add(jMenuItemSimulation_StopSim);

        jMenuItemSimulation_StepSim.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItemSimulation_StepSim.setText("Step-By-Step");
        jMenuItemSimulation_StepSim.setEnabled(false);
        jMenuItemSimulation_StepSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSimulation_StepSimActionPerformed(evt);
            }
        });
        jMenuSimulation_SimOpt.add(jMenuItemSimulation_StepSim);

        jMenuItemNextWithShortcut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        jMenuItemNextWithShortcut.setText("Perform one step");
        jMenuItemNextWithShortcut.setEnabled(false);
        jMenuItemNextWithShortcut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNextWithShortcutActionPerformed(evt);
            }
        });
        jMenuSimulation_SimOpt.add(jMenuItemNextWithShortcut);

        jMenuBarSimulation.add(jMenuSimulation_SimOpt);

        jMenuSimulation_ShowConstr.setText("Construction");
        jMenuSimulation_ShowConstr.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuSimulation_ShowConstrMouseClicked(evt);
            }
        });
        jMenuSimulation_ShowConstr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSimulation_ShowConstrActionPerformed(evt);
            }
        });

        jMenuItemSimulation_LoadConfig.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemSimulation_LoadConfig.setText("Load Configuration");
        jMenuItemSimulation_LoadConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSimulation_LoadConfigActionPerformed(evt);
            }
        });
        jMenuSimulation_ShowConstr.add(jMenuItemSimulation_LoadConfig);

        jMenuItemSimulation_CreateConfig.setText("Create New Configuration");
        jMenuItemSimulation_CreateConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSimulation_CreateConfigActionPerformed(evt);
            }
        });
        jMenuSimulation_ShowConstr.add(jMenuItemSimulation_CreateConfig);

        jMenuBarSimulation.add(jMenuSimulation_ShowConstr);

        jMenuSimulation_NextStep.setText("Next");
        jMenuSimulation_NextStep.setEnabled(false);
        jMenuSimulation_NextStep.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jMenuSimulation_NextStep.setMargin(new java.awt.Insets(0, 30, 0, 0));
        jMenuSimulation_NextStep.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuSimulation_NextStepMouseClicked(evt);
            }
        });
        jMenuSimulation_NextStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSimulation_NextStepActionPerformed(evt);
            }
        });
        jMenuBarSimulation.add(jMenuSimulation_NextStep);

        jMenuSimulation_ChangeDelay.setText("Change Delay");
        jMenuSimulation_ChangeDelay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuSimulation_ChangeDelayMouseClicked(evt);
            }
        });
        jMenuSimulation_ChangeDelay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSimulation_ChangeDelayActionPerformed(evt);
            }
        });
        jMenuBarSimulation.add(jMenuSimulation_ChangeDelay);

        setJMenuBar(jMenuBarSimulation);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelSimulation, javax.swing.GroupLayout.DEFAULT_SIZE, 901, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelSimulation, javax.swing.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuSimulation_ShowConstrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSimulation_ShowConstrActionPerformed
    }//GEN-LAST:event_jMenuSimulation_ShowConstrActionPerformed

    private void jMenuSimulation_ShowConstrMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuSimulation_ShowConstrMouseClicked
    }//GEN-LAST:event_jMenuSimulation_ShowConstrMouseClicked
    public void loadConfiguration(File f) {
        try {
            loadedArchitecture = CCFParser.parseFile(f, "UTF-8");
            // TODO draw architecture
            if (coreTagToCore == null) {
                coreTagToCore = new HashMap<>();
            }
            coreTagToCore.clear();
            int i = 0;
            for (String coreTag : loadedArchitecture.getCoreTags()) {
                coreTagToCore.put(coreTag, loadedArchitecture.getCore(coreTag));
            }
            jMenuItemSimulation_LoadTrace.setEnabled(true);
            drawArchitecturePanel.updateStuff(coreTagToCore);
            JOptionPane.showMessageDialog(null, StringLiterals.CONFIGURATION_LOADED, "EDUCacheSim: " + "Load configuration", JOptionPane.INFORMATION_MESSAGE);
        } catch (FileParseException ex) {
            JOptionPane.showMessageDialog(null, StringLiterals.ERROR_PARSING_FILE + "\n" + ex.getMessage(), "EDUCacheSim: " + "Load configuration", JOptionPane.INFORMATION_MESSAGE);
            Logger.getLogger(SimulationJFrame2.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, StringLiterals.ERROR_OPENING_FILE + "\n" + ex.getMessage(), "EDUCacheSim: " + "Load configuration", JOptionPane.INFORMATION_MESSAGE);
            Logger.getLogger(SimulationJFrame2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void jMenuItemSimulation_LoadConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSimulation_LoadConfigActionPerformed

        fileChooser.setFileFilter(new CCFileFilter());
        int returnVal = fileChooser.showOpenDialog(SimulationJFrame2.this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            loadConfiguration(file);
        } else {
        }

    }//GEN-LAST:event_jMenuItemSimulation_LoadConfigActionPerformed

    private void performOneStep() {
        if (stateOfSimulator != SimState.STOP && atf.getCurrentPosition() < atf.getNumberOfTraceEntries()) {

            //jListSimulation_AdressList.ensureIndexIsVisible(atf.getCurrentPosition());
            //jListSimulation_AdressList.setSelectedIndex(atf.getCurrentPosition());
            //jListSimulation_AdressList.invalidate();
            AddressToRead atr = atf.getNextAddress();

            try {
                String output = "";
                lastResult = loadedArchitecture.readAddress(atr.getCoreTag(), atr.getAddress());
                //colorLevelButtons();
                CPUCore core = loadedArchitecture.getCore(atr.getCoreTag());
                output += "<br/><b>Core: " + atr.getCoreTag();
                output += "</b><br/><b>Reading address: " + atr.getAddress();
                output += "</b><br/><i>Looking up L1 set " + lastResult.getL1_looked_cacheSet() + "</i>";
                if (lastResult.isL1hit()) {
                    output += "<br/><b style='color:#00AA00'>L1 HIT </b>" + lastResult.getL1_looked_cacheLine();
                } else {
                    output += "<br/><b style='color:#AA0000'>L1 MISS </b>";
                    output += "<br/><i>Looking up L2 set " + lastResult.getL2_looked_cacheSet() + "</i>";
                    if (lastResult.isL2hit()) {
                        output += "<br/><b style='color:#00AA00'>L2 HIT </b>" + lastResult.getL2_looked_cacheLine();
                    } else {
                        output += "<br/><b style='color:#AA0000'>L2 MISS </b>";
                        output += "<br/><i>Looking up L3 set " + lastResult.getL3_looked_cacheSet() + "</i>";
                        if (lastResult.isL3hit()) {
                            output += "<br/><b style='color:#00AA00'>L3 HIT </b>" + lastResult.getL3_looked_cacheLine();
                        } else {
                            output += "<br/><b style='color:#AA0000'>L3 MISS </b> going to RAM<br/>";
                        }
                    }
                }
                //jLabelVerbOutput.setText("<html><body>" + output + "</body></html>");
                try {
                    verboseOutput.write(output);
                } catch (IOException ex) {

                    Logger.getLogger(SimulationJFrame2.class.getName()).log(Level.SEVERE, null, ex);
                }
                List<CacheSet> sets = core.getLevel(1).getCacheSets();
                //loadCacheSetsInPanel(1, sets);
                //loadCacheLinesInPanel(sets.get(lastResult.getL1_looked_cacheSet()).getCacheLines());
                //colorCacheSet(1);
                //colorCacheLine(1);
            } catch (TagNotFoundException | DefaultElementSizeNotSetException ex) {
                JOptionPane.showMessageDialog(null, StringLiterals.ERROR_PERFORMING_SIMULATION + "\n" + ex.getMessage(), "EDUCacheSim: " + "Simulation:", JOptionPane.INFORMATION_MESSAGE);
                timerRun.cancel();
                stateOfSimulator = SimState.END;
                jMenuSimulation_NextStep.setEnabled(false);
                Logger.getLogger(SimulationJFrame2.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            jMenuItemSimulation_StopSimActionPerformed(null);
        }
    }
    private void jMenuItemSimulation_LoadTraceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSimulation_LoadTraceActionPerformed
        fileChooser.setFileFilter(new ATFileFilter());
        int returnVal = fileChooser.showOpenDialog(SimulationJFrame2.this);
        // TODO load values in seperate lines
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                atf = new ATFParser(file);
                jMenuItemSimulation_StartSim.setEnabled(true);
                jMenuItemSimulation_StepSim.setEnabled(true);
                stateOfSimulator = SimState.STOP;
                DefaultListModel listModel = new DefaultListModel();

                for (int i = 0; i < atf.getNumberOfTraceEntries(); i++) {
                    AddressToRead atr = atf.getAddressAtPosition(i);
                    listModel.addElement(atr.getCoreTag() + ": " + atr.getAddress());
                }
                //jListSimulation_AdressList.setModel(listModel);
                Set<String> tags = loadedArchitecture.getCoreTags();
                for (String tag : tags) {
                    loadedArchitecture.getCore(tag).setDefaultElemSize(atf.getDefaultElemSize());
                }

            } catch (FileParseException ex) {
                JOptionPane.showMessageDialog(null, StringLiterals.ERROR_PARSING_FILE + "\n" + ex.getMessage(), "EDUCacheSim: " + "Load address trace", JOptionPane.INFORMATION_MESSAGE);
                Logger.getLogger(SimulationJFrame2.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(null, StringLiterals.ERROR_OPENING_FILE + "\n" + ex.getMessage(), "EDUCacheSim: " + "Load address trace", JOptionPane.INFORMATION_MESSAGE);
                Logger.getLogger(SimulationJFrame2.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, StringLiterals.ERROR_OPENING_FILE + "\n" + ex.getMessage(), "EDUCacheSim: " + "Load address trace", JOptionPane.INFORMATION_MESSAGE);
                Logger.getLogger(SimulationJFrame2.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_jMenuItemSimulation_LoadTraceActionPerformed

    private void jMenuItemSimulation_StepSimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSimulation_StepSimActionPerformed
        if (stateOfSimulator == SimState.STOP) {
            loadedArchitecture.resetWholeArchitecture();
            atf.setCurrentPosition(0);
            setDefaultElementSizeInCores(atf.getDefaultElemSize());
        }
        if (verboseOutput == null) {
            try {
                verboseFile = new File(StringLiterals.DEFAULT_VERBOSE_OUTPUT_FILE);
                if (verboseOutput != null) {
                    verboseOutput.close();
                }
                verboseOutput = new BufferedWriter(new FileWriter(verboseFile));
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, StringLiterals.ERROR_VERBOSE_OPEN, "EDUCacheSim: " + "Start simulation", JOptionPane.INFORMATION_MESSAGE);
                Logger.getLogger(SimulationJFrame2.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
        } else {
            try {
                if (verboseOutput != null) {
                    verboseOutput.close();
                }
                verboseOutput = new BufferedWriter(new FileWriter(verboseFile));
            } catch (IOException ex) {
                Logger.getLogger(SimulationJFrame2.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        stateOfSimulator = SimState.STEP;

        jMenuItemSimulation_StepSim.setEnabled(false);
        jMenuItemSimulation_StepSim.setFont(new Font("Segoe UI", Font.BOLD, 12));
        jMenuItemSimulation_StopSim.setEnabled(true);
        jMenuItemSimulation_StopSim.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        jMenuItemSimulation_StartSim.setEnabled(true);
        jMenuItemSimulation_StartSim.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        if (timerRun != null) {
            timerRun.cancel();
        }
        jMenuSimulation_NextStep.setEnabled(true);
        jMenuItemNextWithShortcut.setEnabled(true);
    }//GEN-LAST:event_jMenuItemSimulation_StepSimActionPerformed
    private void setDefaultElementSizeInCores(int size) {
        for (String tag : loadedArchitecture.getCoreTags()) {
            loadedArchitecture.getCore(tag).setDefaultElemSize(size);
        }
    }
    private void jMenuItemSimulation_StartSimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSimulation_StartSimActionPerformed
        if (stateOfSimulator == SimState.STOP) {
            atf.setCurrentPosition(0);
            setDefaultElementSizeInCores(atf.getDefaultElemSize());
        }
        stateOfSimulator = SimState.START;
        if (verboseOutput == null) {
            try {
                verboseFile = new File(StringLiterals.DEFAULT_VERBOSE_OUTPUT_FILE);
                verboseOutput = new BufferedWriter(new FileWriter(verboseFile));
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, StringLiterals.ERROR_VERBOSE_OPEN, "EDUCacheSim: " + "Start simulation", JOptionPane.INFORMATION_MESSAGE);
                Logger.getLogger(SimulationJFrame2.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
        } else {
            try {
                verboseFile = new File(StringLiterals.DEFAULT_VERBOSE_OUTPUT_FILE);
                verboseOutput = new BufferedWriter(new FileWriter(verboseFile));
            } catch (IOException ex) {
                Logger.getLogger(SimulationJFrame2.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        jMenuItemSimulation_StartSim.setEnabled(false);
        jMenuItemSimulation_StartSim.setFont(new Font("Segoe UI", Font.BOLD, 12));
        jMenuItemSimulation_StopSim.setEnabled(true);
        jMenuItemSimulation_StopSim.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        jMenuItemSimulation_StepSim.setEnabled(true);
        jMenuItemSimulation_StepSim.setFont(new Font("Segoe UI", Font.PLAIN, 12));

        timerRun = new Timer();
        timerRun.schedule(new TimerTask() {
            @Override
            public void run() {
                SimulationJFrame2.this.performOneStep();
            }
        }, 0, selectedDelayInSec * 1000);
        jMenuSimulation_NextStep.setEnabled(false);
        jMenuItemNextWithShortcut.setEnabled(false);
    }//GEN-LAST:event_jMenuItemSimulation_StartSimActionPerformed

    private void jMenuSimulation_NextStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSimulation_NextStepActionPerformed
    }//GEN-LAST:event_jMenuSimulation_NextStepActionPerformed

    private void jMenuSimulation_ChangeDelayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSimulation_ChangeDelayActionPerformed
    }//GEN-LAST:event_jMenuSimulation_ChangeDelayActionPerformed

    private void jMenuSimulation_ChangeDelayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuSimulation_ChangeDelayMouseClicked
        try {
            String rez = JOptionPane.showInputDialog(StringLiterals.CHANGE_DELAY);
            int delay = Integer.parseInt(rez);
            if (delay <= 0) {
                JOptionPane.showMessageDialog(null, StringLiterals.ERROR_DELAY_VALUE, "EDUCacheSim: " + "Change delay", JOptionPane.INFORMATION_MESSAGE);
            } else {
                this.selectedDelayInSec = delay;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, StringLiterals.ERROR_DELAY_PARSE, "EDUCacheSim: " + "Change delay", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jMenuSimulation_ChangeDelayMouseClicked

    private void jMenuSimulation_NextStepMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuSimulation_NextStepMouseClicked
        performOneStep();
    }//GEN-LAST:event_jMenuSimulation_NextStepMouseClicked

    private void jMenuItemSimulation_StopSimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSimulation_StopSimActionPerformed
        if (timerRun != null) {
            timerRun.cancel();
        }
        stateOfSimulator = SimState.STOP;
        atf.setCurrentPosition(0);
        try {
            verboseOutput.close();
            saveVerboseOutput();
            String results = getResults();
            SimResultJFrame resultFrame = new SimResultJFrame(results);
            resultFrame.setTitle("EDUCacheSim: Results from simulation");
            resultFrame.setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(SimulationJFrame2.class.getName()).log(Level.SEVERE, null, ex);
        }
        jMenuSimulation_NextStep.setEnabled(false);
        jMenuItemSimulation_StartSim.setEnabled(true);
        jMenuItemSimulation_StepSim.setEnabled((true));
        jMenuItemSimulation_StopSim.setEnabled(false);
        jMenuItemSimulation_StepSim.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        jMenuItemSimulation_StopSim.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        jMenuItemSimulation_StartSim.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        loadedArchitecture.resetWholeArchitecture();
    }//GEN-LAST:event_jMenuItemSimulation_StopSimActionPerformed
    private void saveVerboseOutput() {

        int result = JOptionPane.showConfirmDialog(null, "Would you like to save the verbose output to a file?", "EDUCacheSim: End of simulation", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            fileChooser.setFileFilter(new HTMLFileFilter());
            int returnVal = fileChooser.showSaveDialog(this);
            fileChooser.setName("output.html");
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                try {

                    File file = fileChooser.getSelectedFile();
                    verboseOutput.close();
                    FileChannel destination;
                    try (FileChannel source = new FileInputStream(verboseFile).getChannel()) {
                        destination = new FileOutputStream(file).getChannel();
                        destination.transferFrom(source, 0, source.size());
                    }
                    destination.close();
                } catch (IOException ex) {
                    Logger.getLogger(SimulationJFrame2.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }

    }
    private void jMenuItemNextWithShortcutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNextWithShortcutActionPerformed
        performOneStep();
    }//GEN-LAST:event_jMenuItemNextWithShortcutActionPerformed

    private void jMenuItemSimulation_CreateConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSimulation_CreateConfigActionPerformed
        if (construction_mode == null) {
            construction_mode = new ConstructionJFrame2(this);
        }
        construction_mode.setVisible(true);
    }//GEN-LAST:event_jMenuItemSimulation_CreateConfigActionPerformed
    public void loadCacheLineInfo(int lineNum, CacheLine line) {
        String text = "<html><b>Line number: <b>" + lineNum + "<br/><br/>";

        if (line.getLineW() == 0 && line.getFirstAddressInLine() == 0) {
            text += "Cache line is empty";
        } else {
            text += "<b>Loaded addresses:</b><br/>";
            int size = line.getLineW() / line.getElementSize();
            int start = line.getFirstAddressInLine();
            for (int i = 0; i < size; i++) {
                text += start + "<br/>";
                start += line.getElementSize();
            }
        }
        text += "</html>";
        //jLabelSimulation_CLInfo_LineNum.setText(text);
        //jPanelSimulation_CacheLineInfo.invalidate();
    }

   

//TODO reuse this
    private String getResults() {
        StringBuilder result = new StringBuilder();
        result.append("<html><h1>Results for simulation</h1>");
        for (String coreTag : loadedArchitecture.getCoreTags()) {
            CPUCore core = loadedArchitecture.getCore(coreTag);
            result.append("<h2>Core: ");
            result.append(coreTag);
            result.append("</h2>");
            for (int i = 1; i <= 3; i++) {
                CacheLevel level = core.getLevel(i);
                result.append("<h3>Level ");
                result.append(i);
                result.append(" (");
                result.append(level.getTag());
                result.append(")</h3>Total memory calls to level: <b>");
                result.append(level.getMisses() + level.getHits());
                result.append("</b><br/>Hits: <b>").append(level.getHits());
                result.append("</b><br/>Misses: <b>").append(level.getMisses()).append("</b><br/>");

            }

        }
        result.append("</html>");
        return result.toString();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {

            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SimulationJFrame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SimulationJFrame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SimulationJFrame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimulationJFrame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new SimulationJFrame2().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel architectureHolderPanel;
    private javax.swing.JMenuBar jMenuBarSimulation;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItemNextWithShortcut;
    private javax.swing.JMenuItem jMenuItemSimulation_CreateConfig;
    private javax.swing.JMenuItem jMenuItemSimulation_LoadConfig;
    private javax.swing.JMenuItem jMenuItemSimulation_LoadTrace;
    private javax.swing.JMenuItem jMenuItemSimulation_StartSim;
    private javax.swing.JMenuItem jMenuItemSimulation_StepSim;
    private javax.swing.JMenuItem jMenuItemSimulation_StopSim;
    private javax.swing.JMenu jMenuSimulation_ChangeDelay;
    private javax.swing.JMenu jMenuSimulation_NextStep;
    private javax.swing.JMenu jMenuSimulation_ShowConstr;
    private javax.swing.JMenu jMenuSimulation_SimOpt;
    private javax.swing.JPanel jPanelSimulation;
    // End of variables declaration//GEN-END:variables
}
